(jbuild_version 1.0)

(library
 (public_name <name>)
 (package <package>)
 (synopsis <string>)
 (modules <modules>)
 (libraries <library-dependencies>)
 (wrapped <boolean>)
 (wrapped (transition <message>))
 (preprocess <preprocess-spec>)
 (preprocessor_deps (<deps-conf list>))
 (optional)
 (foreign_stubs (language c) (names src1 src2))
 (foreign_stubs (language cxx) (names src3) (flags -O2))
 (foreign_archives arch1 some/dir/arch2)
 (install_c_headers (<names>))
 (modes <modes>)
 (no_dynlink)
 (kind <kind>)
 (ppx_runtime_libraries (<library-names>))
 (virtual_deps (<opam-packages>)
 (js_of_ocaml 
  (flags <flags>)
  (javascript_files (<files-list>))
 )
 (flags (<flags>))
 (ocamlc_flags (<flags>))
 (ocamlopt_flags (<flags>))
 (library_flags (<flags>))
 (c_library_flags <flags>)
 (modules_without_implementation <modules>)
 (private_modules <modules>)
 (allow_overlapping_dependencies)
 (enabled_if <blang expression>)
 (inline_tests)
 (root_module <module>))

(foreign_library
 (archive_name arch1)
 (language c)
 (names src4 src5)
 (include_dir headers))

(deprecated_library_name
 (old_public_name <name>)
 (new_public_name <name>))

(rule
 (target foo.ml)
 (action
  (run %{deps} -o %{target}))
 (deps generator/gen.exe)
 (mode (promote (until-clean) (into <dir>)))
 (fallback)
 (locks (<lock-names>))
 (alias <alias-name>)
 (package <package>)
 (enabled_if <blang expression>))

(rule
 (target b)
 (deps   a)
 (action (copy %{deps} %{target})))


(ocamllex
 (modules <names>)
 (mode    <mode>))

(ocamlyacc
 (modules <names>)
 (mode    <mode>))

(menhir
 (modules <parser1> <parser2> ...)
 (merge_into <base_name>)
 (flags <option1> <option2> ...)
 (infer <bool>)
 )

(cinaps
 (files f1.mli f2.ml)
 (libraries lsp_gen))

(documentation 
 (package <name>)
 (mld_files f1.mld f2.mld))

(alias
 (name    <alias-name>)
 (deps    <deps-conf list>)
 (action (run %{exe:my-test-program.exe} blah))
 (package <name>)
 (locks (<lock-names>))
 (enabled_if <blang expression>))

; Incomplete from now

(install
 (files hello.txt)
 (section share)
 (package mypackage))

(dirs :standard \ node_modules)
